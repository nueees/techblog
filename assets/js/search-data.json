{
  
    
        "post0": {
            "title": "Docker Container Configuration & management",
            "content": "출처_Building Cloud private native 전문가 양성과정 교재 . 1.Docker Container . Container &amp; Virtualization . 하드웨어 성능이 올라가면서, 유휴자원을 활용하는 가상화(자원을 나눠서 사용) 기술이 대두됨. . 가상화 종류 . Hypervisor Virtualization(Native/Bare Metal): 하드웨어 위에 OS 대신 하이퍼바이저를 설치하고 가상(개별OS)머신 생성 (Hyper-V,XenServer) | Host Virtualization: 하드웨어 위에 OS 설치하고, 하이퍼바이저 설치 후, 가상(개별OS)머신 생성 (VMware, VirtualBox) | Container Virtualization: 하드웨어 위에 OS설치하고, 컨테이너 runtime 관리 S/W 설치 후 가상(App)머신 생성 (Docker) 개별운영체제X, 호스트 OS의 일부를 공유하는 방식 사용, overhead 적음 | 그밖에 Application/Network/Storage Virtualization 있음. | . Docker Architecture . Docker’s strengths . don’t need a guest OS | Transplant : easily ported across different platforms | support On-Premise, Cloud, and DevOps open source | . Docker’s main function . Image 생성/관리 image는 컨테이너 구동을 위한 데이터 생성시 코드로 기술 가능(Infrastructure as Code, IaC) | Image 공유 Registry는 Image의 저장소 (Ubuntu, Debian, CentOS, Fedora의 기본 이미지, 다양한 소프트웨어 탑재 된 이미지 제공) 다운로드, 업로드, 버전 관리 가능 | Container 운영 이미지 상태의 파일 -&gt; 프로세스로 띄움 시작, 중지, 삭제 작업 | . 컨테이너 간 간섭을 방지하기 위해 Isolation 기술 (리눅스 namespace와 cgroup 기능) 사용 . technique for Docker : 리눅스 커널 . 독립된 환경 네임스페이스(namespace) 네임스페이스 별로 독립된 PID, Network, UID, MOUNT, UTS, IPC 사용 | 제어그룹 (cgroup) Process 또는 Thread를 그룹화 하여 관리 - CPU나 Memory를 그룹별로 제한 가능 | 가상 Bridge와 가상 NIC(Network Interface Card) 컨테이너 별 각각의 가상 NIC가 할당(ContainerA - eth0, ContainerB - eth0) 가상 NIC는 docker0(172.17.0.0/16)라는 가상 bridge로 연결되어 컨테이너끼리 또는 호스트(물리NIC)를 통해 외부 네트워크로 연결 (Host - eth0) | 계층 파일 시스템 기본 컨테이너 이미지에 추가 작업 시 COW(Copy on Write)* 방식으로 생성 COW 방식은 부모 프로세스가 자식 프로세스를 생성할 때 전부 복제하지 않고, 쓰기가 발생했을 때 변경된 부분만 복제하는 방법과 유사 도커 이미지관리에 사용되는 FS or Library : Btrfs, AUFS, Device Mapper, OverlayFS | . . 2.Managing Docker Container . Installing Docker Engine . 도커 패키지 리포지토리 연결 및 설치 . # yum install -y yum-utils # 필요 util 설치 # yum-config-manager --add-rep https://download.docker.com/linux/centos/docker-ce.repo # 도커 구성 매니저 설치 # yum repolist # yum -y install docker-ce docker-ce-cli containerd.io # 도커 설치 # yum list docker-ce # systemctl start docker.service # 서비스 시작 # systemctl enable docker.service # systemctl is-active docker.service # docker --help . Docker container image . 도커 이미지 관리 . # docker search --help # docker search centos -s 1000 # repository에서 centos 검색 # docker pull --help # docker pull centos # repository에서 centos 가져오기 # docker images # docker tag --help # docker tag centos:latest centos:ver7 # centos 태그 latest-&gt;ver7로 변경 # docker rmi --help # docker rmi centos # centos image 제거 # docker image prune # 이름없는 dangling 이미지 제거 # docker login # docker tag centos:latest nueees/repo-web:centos # docker push --help # docker push nueees/repo-web:centos . . Docker container management . 도커 컨데이너 관리 . # docker create --help # docker create -it --name c1 centos # centos 이미지로 c1라는 컨테이너 생성 # docker ps --help # docker ps -a # docker inspect --help # docker inspect c1 # # docker start --help # docker start c1 # docker stop --help # docker stop c1 # docker run --help # docker run -it --name c2 centos # docker run -d --name web1 httpd # docker rm -f web1 . run (create+start) exit -&gt; 컨테이너 종료 Ctrl+P+Q -&gt; 컨테이너 종료하지 않고 빠져나옴 . # docker attach --help # docker run -itd --name c1 centos # docker attach c1 # background에 실행중인 c1 컨데이너 접근 # docker exec --help # docker run -d --name web1 httpd # docker exec -it web1 bash # web1 컨테이너 접근해서 bash 실행 # docker top --help # docker top web1 # web1 컨테이너에서 실행중인 process 확인 # docker top web1 aux # docker rename --help # docker rename c1 newc1 # docker pause --help # docker pause web1 # docker unpaues web1 # docker cp --help # docker run -itd --name c1 centos # docker cp dockercp.txt c1:/ # host file -&gt; container c1의 /경로로 copy # docker exec -it c1 cat /dockercp.txt # docker diff --help # docker attach c1 ## rm -f anaconda-post.log # 기존 컨테이너 내 log 삭제 후 # docker diff c1 # docker commit --help # docker commit c1 centos:hello # 기존 c1 container로 new image 생성 # docker images # docker save --help # 여러개 이미지를 archive file로 저장 시 # docker save -o imgarc.tar centos:hello httpd:latest # centos:hello, httpd 두개 image를 archive file로 저장 # docker load --help # docker load -i imgarc.tar # archive file에 저장된 이미지 불러오기 # docker images # 불러온 이미지 확인 # docker export --help # 컨테이너 파일시스템을 archive file로 추출 # docker attach c1 ## echo &quot;This is export test&quot; &gt; export.txt # docker export -o testexport.tar c1 # tar tf testexport.tar | grep export.txt # docker import --help # export로 컨테이너로 추출한 archive file로 이미지로 생성 # docker import testexport.tar export:test . 컨테이너 네트워크 구성 . # ip a s # brctl show # docker run -itd --name c1 centos # brctl show # docker attach c1 ## yum -y install net-tools ## ifconfig ## rount -n # docker0는 172.17.0.0/16 네트워크 사용하고 외부 통신 가능 ## ping -c2 google.co.kr # iptables -L -t nat # 게이트웨이 172.17.0.1이며 마스커레이딩 설정 됨 # docker network --help # docker network ls # 도커 네트워크는 bridge, host, none 세가지 # docker inspect bridge # docker network create --help # docker network create d-net # bridge 유형으로 도커 네트워크 생성 # docker inspect d-net # 네트워크 범위(subnet) 자동으로 172.18.0.0/16으로 설정 # docker network create --subnet 192.168.0.0/24 --gateway 192.168.0.254 custom-net # docker run -it --net custom-net --name a1 alpine # 사용자 정의 custom-net 네트워크 사용하여 컨테이너 생성 # docker run -it --net host --name a2 alpine # host 유형으로 생성시 host 네트워크를 공유 ## ifconfig # docker run -it --net none --name a3 none alpine # none 유형은 네트워크 할당 안함 ## ifconfig . 컨테이너 통신 . # docker run -itd --name a1 alpine # docker run -itd --name a2 --link a1 alpine # docker attach a2 ## ping a1 # ping 감 # docker attach a1 ## ping a2 # ping 가지 않음 # docker exec a1 cat /etc/hosts # docker exec a2 cat /etc/hosts # a1이 등록된 걸 확인 # docker run -itd --name a3 --link a1:alpine1 alpine # 별칭으로 링크 등록 # docker exec a1 ping alpine1 # ping 감 # docker exec a3 cat /etc/hosts # a1과 alpine1으로 등록된 걸 확인 # docker run -d --name web1 httpd # curl localhost # container에서는 80포트가 열려있으나 실제 host의 주소로 접근 불가 # docker run -d -p 80:80 --name web2 httpd # host의 port 80으로 요청오면 container 80으로 전달 (호스트:컨테이너) . 호스트의 특정 포트가 컨테이너 포트와 연결되어 있으면 해당 포트는 다른 컨테이너와 연결될 수 없음. . 컨테이너 볼륨 . # mkdir volume # echo hello &gt; volume/hello.txt # docker run -it -v /boot/volume:/mnt --name v1 centos # host 디렉토리를 container와 공유 (호스트:컨테이너) ## ls /mnt ## cat /mnt/hello.txt ## df -h # /mnt 디렉토리가 host의 /dev/sda1에 연결되어 있음 # mkdir vol1 vol2 vol3 # docker run -it -v /boot/vol1:/vol1 -v /boot/vol1:/vol1 -v /boot/vol1:/vol1 --name v2 centos # 동시에 다수 볼륨도 연결가능 # docker run -it -v /boot/vol1:/vol1 --name c2 centos # 하나 볼륨을 동시에 Read-Write시 crash 발생 # docker run -it -v /boot/vol1:/vol1:ro --name c3 centos # 볼륨 공유시엔 하나 외 나머지는 Read-Only로 ## touch /vol1/xxx # docker run -it -v vol-1:/vol1 --name c1 centos # host에서 디렉토리 생성없이 docker volume 생성 후 연결 (도커볼륨:컨테이너) ## touch /vol1/x # docker run -it -v vol-1:/vol1 --name c2 centos ## ls /vol1 # 파일 x 확인 가능 # docker volume ls # docker 볼륨 확인 # docker inspect vol-1 # 실제로는 host 디렉토리 사용 # docker volume create --help # docker volume create vol2 # 수동으로도 생성 가능 # docker run -it --name m1 mysql # docker inspect m1 # 도커 볼륨을 자동으로 생성하는 이미지가 있음 (&quot;Volumes&quot;:{...) # docker volume ls # 생성된 볼륨 확인 . 컨테이너 환경변수 설정 . # docker run -it -e a=100 --name c1 centos ## echo $a # docker run -it --name db1 mysql # error 출력되며 env 설정 필요 # docker ps -a # docker inspect db1 # (&quot;Entrypoint&quot;:[...) # docker run -d -e MYSQL_ROOT_PASSWORD=1234 --name db2 mysql # 환경변수 주고 실행 . 보통 inpsect 내 “Cmd”:[“mysql”]가 실행되나, Entrypoint가 지정되어 있으면 “Entrypoint”:[“docker-entrypoint.sh”]이 우선 실행됨 . 컨데이너 로그 확인 . # docker logs --help # docker logs db1 # 위 환경변수 오류 error log 확인 가능 # docker logs --tail 2 db2 # docker logs --since &quot;2021-10-12T01:00&quot; db2 . 컨테이너 자원 할당 . # docker run -d --name web1 httpd # options 없이 자원 할당 # docker stats web1 # 최대치 할당 # docker run -d --name web2 --memory=&quot;200m&quot; httpd # docker stats --no-stream web1 # 메모리 limit 200MB # # docker update --help # docker update --memory=500m web2 # up가능하나 down은 불가 # docker run -itd -c 10 --name a1 alpine # 가중치 1로 할당 # docker run -itd -c 20 --name a2 alpine # 가중치 2로 할당 # docker attach a1 ## dd if=/dev/zero of=/dev/null &amp; # docker attach a2 ## dd if=/dev/zero of=/dev/null &amp; # docker stats # cpu 사용률 a2가 a1의 두배 확인 # docker run -itd --name a3 -cpus=&quot;0,2&quot; alpine ## dd if=/dev/zero of=/dev/null &amp; # docker stats # a3의 cpu 사용률 20% 확인 # docker run -itd --name c1 --devie-write-bps /dev/sda:1mb centos # sda 디스크에 write작업시 속도 limit을 1MB/s # docker attach c1 ## dd if=/dev/zero of=/perftest bs=1M count=10 oflag=direct # docker run -itd --name c2 centos # 제한없이 # docker attach c2 ## dd if=/dev/zero of=/perftest bs=1M count=10 oflag=direct . CPU, Memory, Block 제한은 가능하나 NET I/O는 제한 불가 . 워드프레스 컨테이너 실행 example . # docker network create wp-web # 네트워크 생성 # docker run -d --name wp-db --net wp-net -v wp-db-vol:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=1234 mysql:5.7 # docker run -d --name wp-web --net wp-net -v wp-web-vol:/var/www/html --link wp-db:mysql -e WORDPRESS_DB_HOST=wp-db:3306 -e WORDPRESS_DB_PASSWORD=1234 -p 80:80 wordpress . http://localhost:8080 또는 http://localhost:8080/wp-admin/install.php로 확인 . .",
            "url": "https://nueees.github.io/techblog/kubernetes/2021/10/19/Docker-Container-Configuration-management.html",
            "relUrl": "/kubernetes/2021/10/19/Docker-Container-Configuration-management.html",
            "date": " • Oct 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "표집분포와 중심극한정리",
            "content": "R과 함께하는 통계학의 이해 - 최용석 . . 5.1 표집분포 . 모수(parameter): 모집단에 대한 수치적 특성값 (모평균, 모비율, 모분산…) . 통계량(statistic): 표본으로부터 획득한 수치적 정보 . 통계량은 그 자체가 하나의 확률변수로서 확률분포를 가지게 된다. . 표집분포(sampling distribution): 통계량이 가지는 확률분포 . 표본 추출과정에서 발생하는 통계량의 값이 가지는 변동은 이 표집분포에 의해 설명될 수 있다. 표집분포는 모집단의 분포에 영향을 받기도 하고 표본의 크기 $n$에도 영향을 받는다. . 확률표본(random sample): 크기가 큰 모집단으로부터 임의 추출된 크기 $n$의 표본 $X_1,X_2,…,X_n$ . $X_1,X_2,…,X_n$은 서로 독립이고 모집단의 분포와 같은 분포를 가진다. . . 5.2 표본평균의 분포와 중심극한정리 . 크기가 $n$인 확률표본 $X_1,X_2,…,X_n$에 대해 $ E(X) = mu $, $ Var(X) = sigma^2 $, $i=1,2,…,n$이고, . $ bar{X} = frac{1}{n} sum{X_i} $일 때, . 표본평균 $ bar{X}$의 기대값과 분산 . $ E( bar{X}) = mu $ $ Var( bar{X}) = frac{ sigma^2}{n} $ . 정규모집단으로부터의 표본평균에 대한 확률분포 . 크기가 $n$인 확률표본 $X_1,X_2,…,X_n$에 대해 $ X_i sim N( mu, sigma^2) $, $i=1,2,…,n$일때, . 표본평균 $ bar{X}$의 확률분포는 $ bar{X} sim N( mu, frac{ sigma^2}{n}) $를 따르게 된다. . 중심극한정리 : 평균이 $ mu$이고 분산이 $ sigma^2$인 모집단으로부터 추출한 크기 $n$의 확률표본의 표본평균 $ bar{X}$는 표본의 크기가 큰 경우(보통 30 이상), 근사적으로 $ mu$이고 분산이 $ frac{ sigma^2}{n}$인 정규분포를 따르게 된다. . .",
            "url": "https://nueees.github.io/techblog/statistics/2021/09/02/%ED%91%9C%EC%A7%91%EB%B6%84%ED%8F%AC%EC%99%80-%EC%A4%91%EC%8B%AC%EA%B7%B9%ED%95%9C%EC%A0%95%EB%A6%AC.html",
            "relUrl": "/statistics/2021/09/02/%ED%91%9C%EC%A7%91%EB%B6%84%ED%8F%AC%EC%99%80-%EC%A4%91%EC%8B%AC%EA%B7%B9%ED%95%9C%EC%A0%95%EB%A6%AC.html",
            "date": " • Sep 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "추정",
            "content": "R과 함께하는 통계학의 이해 - 최용석 . . 6.1 통계적 추론 . 통계적 추론(statistical inference): 모집단의 수치적 특성을 나타내는 모수(parameter)에 대한 정보를 얻어내기 위한 일련의 과정 . 통계량(statistic)들의 값을 계산하고 이것을 이용하여 모집단의 특성(모수)를 알아보는 것이다. . 1) 추정(estimation): 모수에 대한 추측값을 얻되, 그 값의 정밀도를 함께 구하는 것 . 2) 가설 검정(hypotheses testing): 표본의 자료가 모수의 참값에 대한 조사자의 추측을 뒷받침하는지 혹은 반증하는지 결정하는 것 -&gt; 7장 . . 6.2 모평균에 대한 점추정 . 점추정: 모수의 참값과 유사할 것이라고 예상되는 하나의 값 제시 . 모집단의 크기가 $n$인 표본을 임의로 추출할 때 이를 $n$개의 확률변수 $X_1,X_2,…,X_n$으로 표현 추정하고자 하는 하나의 모수에 대하여 이들 $n$개의 확률변수를 이용하여 하나의 통계량을 만들고, 나아가 주어진 표본으로부터 그 실제값을 계산하여 하나의 수치를 제시하는 것 . 추정량(estimator): 모수를 추정하기 위해 만들어진 통계량 (ex. $ hat{ mu}, hat{ sigma} $) . 추정치(estimate): 주어진 표본으로부터 계산된 추정량의 실제값 . $ hat{ mu} = bar{X} = frac{1}{n}(X_1+X_2+…+X_n) = frac{1}{n} sum{X_i}$ . 여기서 $ hat{ mu}$는 모평균 $ mu$에 대한 추정량 . 이러한 추정량은 확률변수들로부터 만들어진 하나의 확률변수이므로 추출된 표본의 값에 따라 그 값(추정치)가 달라질 수 있다. . 표준오차(standard error, S.E.): 수치(추정치)들의 변동은 추정량의 정확도와 관계가 있는데, 이 정확도를 측정하기 위해 추정량의 표준편차를 계산한 것 . $ E( bar{X}) = mu , quad S.E.( bar{X}) = frac{ sigma}{ sqrt{n}} $ 따라서 표본평균 $ bar{X} $를 이용하여 모평균 $ mu$를 추정하고자 할 경우 표본의 크기 $n$이 클수록 표준오차가 작아져서 보다 정확한 추정이 가능하다. 하지만 모수인 $ sigma $(모집단의 표준편차)를 모르는 경우 계산할 수 없다. 표본의 표준편차 $ hat{ sigma} $를 이용하여 추정할 수 있다. . $ hat{ sigma} = s = sqrt{ frac{1}{n-1} sum{(X_i- bar{X})^2} } $ . 소나무 성장 연구를 위한 1년생 소나무 묘목 40그루의 크기를 조사한 자료 : 2.6, 1.9, 1.8, 1.6, 1.4, 2.2,…,1.2 전체 1년생 소나무 묘목의 평균 크기에 대한 추정치(= 표본평균($ bar{x}$)) 와 표준오차($ frac{s}{ sqrt{n}}$) : $ bar{x} = frac{1}{40} times (2.6+1.9+…+1.2) = 1.715 $ $ s^2 = frac{1}{40-1} times { (2.6 - 1.715)^2 + … + (1.2-1.715)^2 } = 0.2254 $ $ frac{s}{ sqrt{n}} = frac{ sqrt{0.2254} } { sqrt{40}} = 0.0751 $ | . . 6.3 모평균에 대한 구간추정 . 구간추정: 모수의 참값을 포함할 것으로 예상되는 적절한 구간을 제시 . . 6.4 모비율에 대한 추정 . .",
            "url": "https://nueees.github.io/techblog/statistics/2021/09/02/%EC%B6%94%EC%A0%95.html",
            "relUrl": "/statistics/2021/09/02/%EC%B6%94%EC%A0%95.html",
            "date": " • Sep 2, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "이산확률변수 및 분포",
            "content": "R과 함께하는 통계학의 이해 - 최용석 . . 3.1 사건의 확률 . 확률(probability) : 실험의 결과에 대해 확신하는 정도를 수치적으로 나타는 척도 . 사건(event) : 어떤 특성을 갖는 결과들의 집합을 ($A$, $B$, …) . P(A)=frac사건A에속하는결과수표본공간에속하는결과수P(A) = frac{사건A에 속하는결과 수}{표본공간에 속하는 결과 수}P(A)=frac사건A에속하는결과수표본공간에속하는결과수 . . 3.2. 확률변수 . 확률변수(random variable) : 표본공간에 속하는 각각의 결과들에 대해 실수값 대응 시켜준 변수 ($X$, $Y$, …) . 한주에 경기 수 (0회, 1회, 2회) | . 확률변수가 가지는 특정값 : ($x$, $y$, …) . 가질 수 있는 값에 따라, . 1) 이산확률변수(discrete random variable) 2) 연속확률변수(continuous random variable) . . 3.3 이산확률변수의 확률분포함수 . 확률분포(probability distribution) : 확률변수가 가지는 값과 그 값을 가질 확률을 정해주는 규칙 . 한주의 경기 수와 그 비율 (0회: $ frac{2}{10}$, 1회: $ frac{5}{10}$, 2회: $ frac{3}{10}$) | . (이산확률변수의) 확률분포함수(probability distribution function) : . $ f(x)= P(X=x) $ . 이산 확률분포함수의 성질 . 모든 $x$값에 대해 $0 leq f(x) leq 1$ $ sum f(x) =1 $ . . 3.4 확률변수의 기대값과 표준편차 . 확률변수의 기대값(expected value) : 확률변수가 가질 수 있는 값들에 대한 확률분포 상의 중심위치 . $ E(X) = sum xf(x)$ . 평균적으로 한주에 수행하는 경기 수 ($ 0회 times frac{2}{10} + 1회 times frac{5}{10} + 2회 times frac{3}{10} = 1.1회$ ) | . 평균과 다른 점? 기대값은 동일한 실험을 무수히 반복했을 때의 평균을 의미하고 10회 던져서 8번 나왔다고 0.8이라고 하지 않음 실수값을 갖는 확률변수에 대해서, 모평균은 확률변수의 기대값이 된다. . 기대값의 성질 . $ E(X) = mu $ $ E(a) = a $ $ E(aX) = a mu $ $ E(aX pm b) = a mu pm b$ . 확률변수의 분산(variance) . 평균적으로 한주에 수행하는 경기 수의 분산 ($ (0회-1.1회)^2 times frac{2}{10} + (1회-1.1회)^2 times frac{5}{10} + (2회-1.1회)^2 times frac{3}{10} = 0.49 $ ) | . $ Var(X) = sum (x- mu)^2f(x)$ . $ Var(X) = E[ (X - E(X) )^2 ] $ $ Var(X) = E(X^2) - E(X)^2 $ . . 분산의 성질 . $ Var(X) = sigma^2 $ $ Var(a) = 0 $ $ Var(aX) = a^2 sigma^2 $ $ Var(aX pm b) = a^2 sigma^2 $ . 확률변수의 표준편차(standard deviation) . $ sqrt{ Var(X) } = sqrt{ sum (x- mu)^2f(x) } $ . . 3.5 이항분포 . 3.3에서 확률분포란 확률변수가 가지는 값과 그 값을 가질 확률을 정해주는 규칙이라고 정의하였는데, 규칙이 밝혀져 이름이 부여된 것들이 있는데 대표적인 예가 이항분포 . 베르누이 시행 : 단 1회의 실험 지칭 . 베르누이 시행의 특징 . 각 시행은 성공(success, $S$ )과 실패(fail, $F$ )의 두 가지 결과만을 갖는다. | 각 시행에서 성공할 확률은 $P(S)$ , 실패할 확률은 $P(F)$ 로 매 시행마다 동일하다. | 각 시행은 상호 독립으로 각각의 시행이 다른 시행의 결과에 영향을 미치지 않는다. | . 성공 확률이 $p$인 베르누이 시행을 $n$번 시행한 경우 성공 횟수를 나타내는 확률변수 $X$의 확률분포함수는 . $ f(x) = P(X=x) = _{n}C_{x}p^x(1-p)^{n-x} , x=0,1,…,n$ . 이항부포의 기대값과 분산 . 성공 횟수를 나타내는 확률변수 $X$가 $X ~ Bin(n,p)$일 때, $ E(X) = np $ $ E(X) = np(1-p) $ . .",
            "url": "https://nueees.github.io/techblog/statistics/2021/09/01/%EC%9D%B4%EC%82%B0%ED%99%95%EB%A5%A0%EB%B3%80%EC%88%98-%EB%B0%8F-%EB%B6%84%ED%8F%AC.html",
            "relUrl": "/statistics/2021/09/01/%EC%9D%B4%EC%82%B0%ED%99%95%EB%A5%A0%EB%B3%80%EC%88%98-%EB%B0%8F-%EB%B6%84%ED%8F%AC.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "확률변수 및 분포",
            "content": "R과 함께하는 통계학의 이해 - 최용석 . . 4.1 연속확률변수의 확률분포함수 . 연속확률변수: 확률변수가 특정 구간의 모든 값을 다 가질 수 있기 때문에 가질 수 있는 값들을 일일이 지칭할 수 없는 확률변수를 의미 . 연속확률분포함수: 확률변수 $X$가 가질 수 있는 특정 구간에서 확률이 어떻게 분포하는가를 나타낼 수 있는 함수 . $X$의 확률분포는 확률의 밀도를 나타내는 확률밀도함수 . 확률밀도함수(probability density function) . 모든 $x$에 대해 $f(x) geq 0 $ | $P(a leq X leq b) = int_{a}^{b}{f(x)dx}$ | $P( infty leq X leq - infty) = int_{ infty}^{- infty}{f(x)dx} = 1$ | . 연속확률변수 $X$가 특정한 값 $x$를 갖게 되는 확률은 0이므로, 구간의 확률을 구할 때는 그 구간의 경계점의 포함 유무는 영향을 받지 않는다. . 연속확률변수의 기대값과 분산 . $ E(X) = int{xf(x)dx} $ $ Var(X) = int{(x- mu)^2f(x)dx} = sigma^2 $ . . 4.2 정규분포 . 정규분포(normal distribution): 좌우대칭의 종모양 곡선 (=Gaussian distribution) . [##_Image | kage@b8vAd6/btrfRDJJxUm/7pnXfXfKX8jcEzS7KAwgl1/img.jpg | alignCenter | width=”100%” data-origin-width=”288” data-origin-height=”257” data-ke-mobilestyle=”widthOrigin” |   |   | _##] | . 정규확률변수 : 종 모양의 확률밀도함수를 가지는 연속형확률변수 X . 정규확률변수의 확률분포에 대한 식은 모집단에 대한 평균 $ mu$와 분산 $ sigma^2$에 의존하므로 $ X sim N( mu, sigma^2) $ 로 표기 . . 4.3 정규분포의 확률계산 . 표준정규분포(standard normal distribution): 평균이 0이고, 분산이 1인 정규분포 . 일반적으로 표준정규분포를 따르는 확률변수는 $Z$로 표현 $ Z sim N(0,1) $이므로 확률변수 $Z$는 평균 $E(Z) = mu_z = 0 $이며, 분산은 $ Var(Z) = sigma_z^2 = 1 $과 같다. . 일반적인 정규분포를 따르는 확률변수 $X$에 대한 확률을 표준정규분포를 따르는 확률변수 $Z$로 변환하는 과정을 표준화(Standardization)라고 한다. . $ frac{X- mu_x}{ sigma_x} $ . . 4.4 이항분포의 정규근사 . . $n$이 증가함에 따라 분포의 형태가 점차 좌우대칭의 종 모양에 가까워짐을 확인할 수 있다. . 이항분포의 정규근사 . 확률변수 $X$가 성공 횟수를 나타내는 이산형 확률변수이고 $X sim Bin(n,p) $일 때, $np$나 $n(1-p)$이 모두 충분히 클 경우(보통 10 이상)에 확률변수 $X$는 근사적으로 다음의 정규 분포를 따르게 된다. $ X sim N(np, np(1-p)) $ . .",
            "url": "https://nueees.github.io/techblog/statistics/2021/09/01/%EC%97%B0%EC%86%8D%ED%99%95%EB%A5%A0%EB%B3%80%EC%88%98-%EB%B0%8F-%EB%B6%84%ED%8F%AC.html",
            "relUrl": "/statistics/2021/09/01/%EC%97%B0%EC%86%8D%ED%99%95%EB%A5%A0%EB%B3%80%EC%88%98-%EB%B0%8F-%EB%B6%84%ED%8F%AC.html",
            "date": " • Sep 1, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Category",
          "content": "Shelf . Statistics | Kubenetes | Spark | .",
          "url": "https://nueees.github.io/techblog/category/",
          "relUrl": "/category/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": ". Seeeun Cho . @nueees . CONTACT . Phone: | Email: nueees@gmail.com | Linkedin: https://www.linkedin.com/in/nueees/ | . EXPERTISE . Program languages: SQL, Java, Javascript, Python, R | Frameworks: Spring, MDD (Model-Driven Development) | Version control systems: SVN, Git, frism | Workflow Control: Job-PaSS | DBMSs: Oracle, Mysql | OSs: Linux, Windows | ETL Tools: TDS, TeraStream, BXI, Oracle GoldenGate, DataPump | . EXPERIENCE . Junior data engineer &amp; developer, JT savings bank | Mar 2020 - Sep 2021 | Junior database engineer, Serends IT service | Feb 2019 - Feb 2020 | Java full stack developer, Kyobo information and communication | Sep 2017 - Nov 2018 | . .",
          "url": "https://nueees.github.io/techblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nueees.github.io/techblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}